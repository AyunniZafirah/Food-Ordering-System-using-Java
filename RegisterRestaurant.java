/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package adv_prog_ass2;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class RegisterRestaurant extends javax.swing.JFrame {

    ComparatorIDRestaurant comp = new ComparatorIDRestaurant();
    TreeSet<Restaurant> recordR = new TreeSet<>(comp);

    /**
     * Creates new form RegisterRestaurant
     */
    public RegisterRestaurant() {
        initComponents();
        tabledatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtRADD = new javax.swing.JTextField();
        txtRID = new javax.swing.JTextField();
        txtRN = new javax.swing.JTextField();
        txtRE = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRestaurant = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        sortR = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtr2 = new javax.swing.JTextField();
        txtr3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtrp1 = new javax.swing.JTextField();
        txtrp2 = new javax.swing.JTextField();
        txtrp3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        txtr1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("REGISTER RESTAURANT");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("   Address :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Restaurant  ID :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Name :");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Email :");

        txtRID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRIDActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblRestaurant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Restaurant ID", "Name", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblRestaurant);

        jLabel13.setText("Sort by :");

        sortR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "ID", "Name" }));
        sortR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortRActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("DISPLAY INFORMATION");

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText("EDIT");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(btnDelete)
                .addGap(52, 52, 52)
                .addComponent(btnEdit)
                .addGap(0, 258, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(22, 22, 22))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnEdit))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(190, 216, 242));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtr3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtr3ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("RM");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("RM");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("RM");

        jLabel10.setText("Food Item 1 :");

        jLabel11.setText("Food Item 2 :");

        jSeparator1.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("**Please list 3 food items sold in the restaurant with its price (RM)**");

        jLabel12.setText("Food Item 3 :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtr1)
                                    .addComponent(txtr2)
                                    .addComponent(txtr3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtrp3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(264, 264, 264)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtrp1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtrp2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(12, 12, 12)))
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtr2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtr3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtrp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtrp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtrp3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        btnSubmit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSubmit.setText("SUBMIT");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRN, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addComponent(txtRID)
                            .addComponent(txtRE, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addComponent(txtRADD)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(btnSubmit)
                        .addGap(102, 102, 102)
                        .addComponent(btnClear))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtRID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtRN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtRADD, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnClear))
                .addContainerGap(31, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void txtr3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtr3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtr3ActionPerformed

    // simpan database dalam jtable and collection
    private void tabledatabase() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

            // Clear existing rows in the table
            DefaultTableModel tbl = (DefaultTableModel) tblRestaurant.getModel();
            tbl.setRowCount(0);

            //display each record of restaurant from database
            String sqlFetch = "SELECT restaurantID, restaurantName, restaurantAddress, restaurantEmail, foodName1, foodName2, foodName3, price1, price2, price3 FROM restaurantinfo";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sqlFetch);

            while (rs.next()) {
                int rid = rs.getInt("restaurantID");
                String rname = rs.getString("restaurantName");
                String raddress = rs.getString("restaurantAddress");
                String remail = rs.getString("restaurantEmail");
                String food1 = rs.getString("foodName1");
                String food2 = rs.getString("foodName2");
                String food3 = rs.getString("foodName3");
                double price1 = rs.getDouble("price1");
                double price2 = rs.getDouble("price2");
                double price3 = rs.getDouble("price3");
                String[] rowData = {String.valueOf(rid), rname, raddress};

                // Add each row from the database to the table model
                tbl.addRow(rowData);

                // simpan dalam collection
                recordR.add(new Restaurant(rid, rname, raddress, remail, food1, food2, food3, price1, price2, price3));
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // simpan new input data dalam collection and database, then from collection into jtable
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:

        try {
            if (txtRADD.getText().isEmpty() || txtRID.getText().isEmpty() || txtRE.getText().isEmpty() || txtRN.getText().isEmpty()
                    || txtr1.getText().isEmpty()
                    || txtr2.getText().isEmpty() || txtr3.getText().isEmpty() || txtrp1.getText().isEmpty() || txtrp2.getText().isEmpty()
                    || txtrp3.getText().isEmpty()) {
                throw new IllegalArgumentException("Please enter all fields");
            }

            if (txtRID.getText().length() != 6) {
                throw new IllegalArgumentException("Restaurant ID must be exactly 6 digits");
            }

            // Collect data
            int restaurantID = Integer.parseInt(txtRID.getText());
            String restaurantName = txtRN.getText();
            String restaurantAddress = txtRADD.getText();
            String restaurantEmail = txtRE.getText();
            String foodName1 = txtr1.getText();
            double foodPrice1 = Double.parseDouble(txtrp1.getText());
            String foodName2 = txtr2.getText();
            double foodPrice2 = Double.parseDouble(txtrp2.getText());
            String foodName3 = txtr3.getText();
            double foodPrice3 = Double.parseDouble(txtrp3.getText());

            // Store in TreeSet
            Restaurant restaurant = new Restaurant(restaurantID, restaurantName, restaurantAddress, restaurantEmail,
                    foodName1, foodName2, foodName3, foodPrice1, foodPrice2, foodPrice3);
            recordR.add(restaurant);

            // Database operations
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

            // Check if the restaurant ID already exists
            String checkSQL = "SELECT COUNT(*) FROM restaurantinfo WHERE restaurantID = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkSQL);
            checkStmt.setInt(1, restaurantID);
            ResultSet rs = checkStmt.executeQuery();
            rs.next();
            int count = rs.getInt(1);

            // if exist, display appropriate message
            if (count > 0) {
                JOptionPane.showMessageDialog(null, "Restaurant ID already exists. Please enter a unique Restaurant ID.", "Duplicate Entry", HEIGHT);

            } else {

                //based on collection, store restaurant details in the database
                String sqlRestaurantInfo = "INSERT INTO restaurantinfo VALUES (?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement pstmtR = conn.prepareStatement(sqlRestaurantInfo);

                pstmtR.setInt(1, restaurant.getRid());
                pstmtR.setString(2, restaurant.getRname());
                pstmtR.setString(3, restaurant.getRaddress());
                pstmtR.setString(4, restaurant.getRemail());
                pstmtR.setString(5, restaurant.getRfood1());
                pstmtR.setString(6, restaurant.getRfood2());
                pstmtR.setString(7, restaurant.getRfood3());
                pstmtR.setDouble(8, restaurant.getRfoodprice1());
                pstmtR.setDouble(9, restaurant.getRfoodprice2());
                pstmtR.setDouble(10, restaurant.getRfoodprice3());
                pstmtR.executeUpdate();

                // Add newly inserted data to the table, based on collection also
                String data[] = {txtRID.getText(), txtRN.getText(), txtRADD.getText()};
                DefaultTableModel tbl = (DefaultTableModel) tblRestaurant.getModel();
                tbl.addRow(data);

                // Notify user
                JOptionPane.showMessageDialog(null, "Restaurant Info and Food Added Successfully");
            }
            conn.close();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Invalid Input!", HEIGHT);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }


    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtRADD.setText("");
        txtRID.setText("");
        txtRN.setText("");
        txtRE.setText("");
        txtr1.setText("");
        txtr2.setText("");
        txtr3.setText("");
        txtrp1.setText("");
        txtrp2.setText("");
        txtrp3.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    // obtain all data from jtable, store in a temporary list
    private List<Restaurant> getAllDataFromTable() {
        List<Restaurant> restaurants = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tblRestaurant.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            int rid = Integer.parseInt(model.getValueAt(i, 0).toString());
            String rname = model.getValueAt(i, 1).toString();
            String raddress = model.getValueAt(i, 2).toString();

            String remail = "";
            String rfood1 = "";
            String rfood2 = "";
            String rfood3 = "";
            double foodprice1 = 0;
            double foodprice2 = 0;
            double foodprice3 = 0;

            Restaurant restaurant = new Restaurant(rid, rname, raddress, remail, rfood1, rfood2, rfood3, foodprice1, foodprice2, foodprice3);
            restaurants.add(restaurant);
        }
        return restaurants;
    }

    //sort all restaurant record by id or name
    private void sortRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortRActionPerformed

        String selectedSortOption = (String) sortR.getSelectedItem();

        // store all data from jtable in a list 
        List<Restaurant> restaurant1 = getAllDataFromTable();

        recordR = switch (selectedSortOption) {
            case "ID" ->
                new TreeSet<>(new ComparatorIDRestaurant());
            case "Name" ->
                new TreeSet<>(new ComparatorNameRestaurant());
            default ->
                recordR;
        };

        recordR.addAll(restaurant1); // Add all restaurant tree set collection (sorted)

        // clear the table display
        DefaultTableModel tbl = (DefaultTableModel) tblRestaurant.getModel();
        tbl.setRowCount(0); // Clear the table

        //smua data dalam collection display dalam jtable(sorted)
        recordR.forEach(restaurant -> {
            String data[] = {String.valueOf(restaurant.getRid()), restaurant.getRname(), restaurant.getRaddress()};
            tbl.addRow(data);
        });


    }//GEN-LAST:event_sortRActionPerformed

    public TreeSet<Restaurant> getRecordR() {
        return recordR;
    }

    private void txtRIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRIDActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed

        //get selected row
        int selectedRow = tblRestaurant.getSelectedRow();

        // if user dont select row, display appropriate message
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(rootPane, "Please select a row to edit");
        } else {
            //get the restaurant details from selected row
            int restaurantId = Integer.parseInt(tblRestaurant.getValueAt(selectedRow, 0).toString());
            String name = tblRestaurant.getValueAt(selectedRow, 1).toString();
            String address = tblRestaurant.getValueAt(selectedRow, 2).toString();
            String email = "";
            String food1 = "";
            String food2 = "";
            String food3 = "";
            double price1 = 0.0;
            double price2 = 0.0;
            double price3 = 0.0;

            //get remaining details that dont display in jtable from collection, based on id
            for (Restaurant r : recordR) {
                if (r.getRid() == restaurantId) {
                    email = r.getRemail();
                    food1 = r.getRfood1();
                    food2 = r.getRfood2();
                    food3 = r.getRfood3();
                    price1 = r.getRfoodprice1();
                    price2 = r.getRfoodprice2();
                    price3 = r.getRfoodprice3();
                    break;
                }
            }

            //display Edit Interface that allow user to edit the details
            EditRestaurant editR = new EditRestaurant(restaurantId, name, address, email, food1, food2, food3, price1, price2, price3);
            editR.setVisible(true);

            editR.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    try {
                        // get latest text field
                        int RestaurantId = Integer.parseInt(editR.txtid.getText());
                        String updatedName = editR.txtname.getText();
                        String updatedAddress = editR.txtaddress.getText();
                        String updatedEmail = editR.txtemail.getText();
                        String updatedfood1 = editR.txtfood1.getText();
                        String updatedfood2 = editR.txtfood2.getText();
                        String updatedfood3 = editR.txtfood3.getText();
                        double updatedprice1 = Double.parseDouble(editR.txtprice1.getText());
                        double updatedprice2 = Double.parseDouble(editR.txtprice2.getText());
                        double updatedprice3 = Double.parseDouble(editR.txtprice3.getText());

                        // Update the JTable
                        DefaultTableModel model = (DefaultTableModel) tblRestaurant.getModel();
                        model.setValueAt(updatedName, selectedRow, 1);
                        model.setValueAt(updatedAddress, selectedRow, 2);

                        // Update the TreeSet
                        Restaurant restaurantToUpdate = null;
                        for (Restaurant r : recordR) {
                            if (r.getRid() == restaurantId) {
                                restaurantToUpdate = r;
                                break;
                            }
                        }
                        //set the new value into the restaurant collection using setter methods
                        if (restaurantToUpdate != null) {

                            restaurantToUpdate.setRname(updatedName);
                            restaurantToUpdate.setRaddress(updatedAddress);
                            restaurantToUpdate.setRemail(updatedEmail);
                            restaurantToUpdate.setRfood1(updatedfood1);
                            restaurantToUpdate.setRfood2(updatedfood2);
                            restaurantToUpdate.setRfood3(updatedfood3);
                            restaurantToUpdate.setRfoodprice1(updatedprice1);
                            restaurantToUpdate.setRfoodprice2(updatedprice2);
                            restaurantToUpdate.setRfoodprice3(updatedprice3);
                        }

                        // Database operations to update the record
                        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03")) {
                            String sqlUpdate = "UPDATE restaurantinfo SET restaurantName = ?, restaurantAddress = ?, restaurantEmail = ?,"
                                    + "foodName1 = ?, foodName2 = ?, foodName3 = ?, price1 = ?, price2 = ?, price3 = ? WHERE restaurantID = ?";
                            try (PreparedStatement pstmt = conn.prepareStatement(sqlUpdate)) {

                                pstmt.setString(1, updatedName);
                                pstmt.setString(2, updatedAddress);
                                pstmt.setString(3, updatedEmail);
                                pstmt.setString(4, updatedfood1);
                                pstmt.setString(5, updatedfood2);
                                pstmt.setString(6, updatedfood3);
                                pstmt.setDouble(7, updatedprice1);
                                pstmt.setDouble(8, updatedprice2);
                                pstmt.setDouble(9, updatedprice3);
                                pstmt.setInt(10, RestaurantId);
                                int rowsAffected = pstmt.executeUpdate();

                                if (rowsAffected > 0) {
                                    JOptionPane.showMessageDialog(rootPane, "Record updated successfully!");
                                } else {
                                    JOptionPane.showMessageDialog(rootPane, "No record was updated.");
                                }
                            }
                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(rootPane, "Error updating database: " + e.getMessage());
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(rootPane, "Invalid number format: " + e.getMessage());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "An error occurred: " + e.getMessage());
                    }
                }
            });
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        // Prompt user to input the restaurant ID
        String inputRestaurantId = JOptionPane.showInputDialog(this, "Enter Restaurant ID to delete:");

        if (inputRestaurantId != null && !inputRestaurantId.isEmpty()) {
            try {
                // Convert restaurantID from String to integer
                int restaurantId = Integer.parseInt(inputRestaurantId);

                // Check if restaurant ID exists in JTable
                DefaultTableModel model = (DefaultTableModel) tblRestaurant.getModel();
                boolean foundInTable = false;
                for (int i = 0; i < model.getRowCount(); i++) {
                    if (Integer.parseInt(model.getValueAt(i, 0).toString()) == restaurantId) {
                        foundInTable = true;
                        //if found, stop iterate
                        break;
                    }
                }

                // If restaurant ID exists in JTable, confirm deletion
                if (foundInTable) {
                    int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                    if (confirmation == JOptionPane.YES_OPTION) {
                        // Remove from JTable
                        for (int i = 0; i < model.getRowCount(); i++) {
                            if (Integer.parseInt(model.getValueAt(i, 0).toString()) == restaurantId) {
                                model.removeRow(i);
                                break;
                            }
                        }

                        // Remove from TreeSet 
                        Restaurant restaurantToRemove = null;
                        for (Restaurant r : recordR) {
                            if (r.getRid() == restaurantId) {
                                restaurantToRemove = r;
                                break;
                            }
                        }
                        if (restaurantToRemove != null) {
                            recordR.remove(restaurantToRemove);
                        }

                        // Database operations to delete the record
                        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03")) {
                            String sqlDelete = "DELETE FROM restaurantinfo WHERE restaurantID = ?";
                            try (PreparedStatement pstmt = conn.prepareStatement(sqlDelete)) {
                                pstmt.setInt(1, restaurantId);
                                pstmt.executeUpdate();
                            }
                        }

                        // Notify the user
                        JOptionPane.showMessageDialog(this, "Record deleted successfully!");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Customer ID " + restaurantId + " does not exist in the table.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid numeric Restaurant ID.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a Restaurant ID to delete.");
        }


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Get the single instance of Home
        Home h = Home.getInstance();
        h.setLocationRelativeTo(null); // Center the frame
        h.setVisible(true); // Show the frame
        this.setVisible(false); // Hide the current frame

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterRestaurant().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JComboBox<String> sortR;
    private javax.swing.JTable tblRestaurant;
    private javax.swing.JTextField txtRADD;
    private javax.swing.JTextField txtRE;
    private javax.swing.JTextField txtRID;
    private javax.swing.JTextField txtRN;
    private javax.swing.JTextField txtr1;
    private javax.swing.JTextField txtr2;
    private javax.swing.JTextField txtr3;
    private javax.swing.JTextField txtrp1;
    private javax.swing.JTextField txtrp2;
    private javax.swing.JTextField txtrp3;
    // End of variables declaration//GEN-END:variables
}
