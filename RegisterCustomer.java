/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package adv_prog_ass2;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wani
 */
public class RegisterCustomer extends javax.swing.JFrame {

    ComparatorIDCustomer comp = new ComparatorIDCustomer();
    TreeSet<Customer> recordC = new TreeSet<>(comp);

    /**
     * Creates new form RegisterCustomer
     */
    public RegisterCustomer() {
        initComponents();
        tabledatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        sortC = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb1Customer = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jLabel13.setText("Sort by :");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel1.setText("REGISTER CUSTOMER");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Customer ID :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Name :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Address :");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Email :");

        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("DISPLAY INFORMATION");

        jLabel15.setText("Sort by :");

        sortC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "ID", "Name" }));
        sortC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortCActionPerformed(evt);
            }
        });

        tb1Customer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tb1Customer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb1CustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb1Customer);

        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        edit.setText("EDIT");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(delete)
                        .addGap(45, 45, 45)
                        .addComponent(edit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sortC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(150, 150, 150))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addGap(16, 16, 16)
                .addComponent(jLabel14)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(sortC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(edit))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        btnSubmit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSubmit.setText("SUBMIT");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("X");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("X");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("X");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                                    .addComponent(txtName)
                                    .addComponent(txtID)
                                    .addComponent(txtEmail)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(btnSubmit)
                                .addGap(41, 41, 41)
                                .addComponent(btnClear)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(64, 64, 64))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSubmit)
                            .addComponent(btnClear))
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed
    // simpan database dalam jtable and collection
    private void tabledatabase() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

            // Clear existing rows in the table
            DefaultTableModel tbl = (DefaultTableModel) tb1Customer.getModel();
            tbl.setRowCount(0);

            //display each record of customer from database
            String sqlFetch = "SELECT custID, custName, custAddress, custEmail FROM customerinfo";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sqlFetch);

            while (rs.next()) {
                int cid = rs.getInt("custID");
                String cname = rs.getString("custName");
                String caddress = rs.getString("custAddress");
                String cemail = rs.getString("custEmail");

                String[] rowData = {String.valueOf(cid), cname, caddress};
                // Add each row from the database to the table model
                tbl.addRow(rowData);

                // simpan dalam collection
                recordC.add(new Customer(cid, cname, caddress, cemail));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtID.setText("");
        txtName.setText("");
        txtAddress.setText("");
        txtEmail.setText("");

    }//GEN-LAST:event_btnClearActionPerformed

    // simpan new input data dalam collection and database, then from collection into jtable
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:

        try {
            if (txtID.getText().isEmpty() || txtName.getText().isEmpty() || txtEmail.getText().isEmpty() || txtAddress.getText().isEmpty()) {
                throw new IllegalArgumentException("Please enter all fields");
            }

            if (txtID.getText().length() != 6) {
                throw new IllegalArgumentException("Customer ID must be exactly 6 digits");
            }

            // Collect data
            int customerID = Integer.parseInt(txtID.getText());
            String customerName = txtName.getText();
            String customerAddress = txtAddress.getText();
            String customerEmail = txtEmail.getText();

            // Store in TreeSet
            Customer customer = new Customer(customerID, customerName, customerAddress, customerEmail);
            recordC.add(customer);

            // Database operations
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

            // Check if the customer ID already exists
            String checkSQL = "SELECT COUNT(*) FROM customerinfo WHERE custID = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkSQL);
            checkStmt.setInt(1, customerID);
            ResultSet rs = checkStmt.executeQuery();
            rs.next();
            int count = rs.getInt(1);

            // if already exist, display appropriate message
            if (count > 0) {
                JOptionPane.showMessageDialog(null, "Customer ID already exists. Please enter a unique Customer ID.", "Duplicate Entry", HEIGHT);

            } else {

                //based on collection, store customer details in the database
                String sqlRestaurantInfo = "INSERT INTO customerinfo VALUES (?,?,?,?)";
                PreparedStatement pstmtR = conn.prepareStatement(sqlRestaurantInfo);

                pstmtR.setInt(1, customer.getCid());
                pstmtR.setString(2, customer.getCname());
                pstmtR.setString(3, customer.getCaddress());
                pstmtR.setString(4, customer.getCemail());
                pstmtR.executeUpdate();

                // Add newly inserted data to the table, based on collection also
                String[] newData = {String.valueOf(customer.getCid()), customer.getCname(), customer.getCaddress()};
                DefaultTableModel tbl = (DefaultTableModel) tb1Customer.getModel();
                tbl.addRow(newData);

                // Notify user
                JOptionPane.showMessageDialog(null, "Customer Info Added Successfully");
            }
            conn.close();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Invalid Input!", HEIGHT);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Database Error", HEIGHT);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

// obtain all data from jtable, store in a temporary list
    private List<Customer> getAllDataFromTable() {
        List<Customer> customers = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tb1Customer.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            int cid = Integer.parseInt(model.getValueAt(i, 0).toString());
            String cname = model.getValueAt(i, 1).toString();
            String caddress = model.getValueAt(i, 2).toString();
            // email null sbb x perlu display dlm table
            String cemail = "";

            Customer customer = new Customer(cid, cname, caddress, cemail);
            customers.add(customer);
        }

        return customers;
    }

    //sort all customer record by id or name
    private void sortCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortCActionPerformed
        // TODO add your handling code here:

        String selectedSortOption = (String) sortC.getSelectedItem();

        // store all data from jtable in a list 
        List<Customer> customers = getAllDataFromTable();

        recordC = switch (selectedSortOption) {
            case "ID" ->
                new TreeSet<>(new ComparatorIDCustomer());
            case "Name" ->
                new TreeSet<>(new ComparatorNameCustomer());
            default ->
                recordC;
        };

        recordC.addAll(customers); // // Add all customers tree set collection (sorted)

        // clear the table display
        DefaultTableModel tbl = (DefaultTableModel) tb1Customer.getModel();
        tbl.setRowCount(0); // Clear the table

        //smua data dalam collection display dalam jtable(sorted)
        recordC.forEach(customer -> {
            String data[] = {String.valueOf(customer.getCid()), customer.getCname(), customer.getCaddress()};
            tbl.addRow(data);
        });
    }//GEN-LAST:event_sortCActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // Get the single instance of Home
        Home h = Home.getInstance();
        h.setLocationRelativeTo(null); // Center the frame
        h.setVisible(true); // Show the frame
        this.setVisible(false); // Hide the current frame
    
    }//GEN-LAST:event_jButton3ActionPerformed
public TreeSet<Customer> getRecordC() {
        return recordC;
    }
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

    // Prompt user to input the customer ID
    String inputCustomerId = JOptionPane.showInputDialog(this, "Enter Customer ID to delete:");

    if (inputCustomerId != null && !inputCustomerId.isEmpty()) {
        try {
            
           // Convert customerID from String to integer
            int customerId = Integer.parseInt(inputCustomerId);

            // Check if customer ID exists in JTable
            DefaultTableModel model = (DefaultTableModel) tb1Customer.getModel();
            boolean foundInTable = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (Integer.parseInt(model.getValueAt(i, 0).toString()) == customerId) {
                    foundInTable = true;
                    //if found, stop iterate
                    break;
                }
            }

            // If customer ID exists in JTable, confirm deletion
            if (foundInTable) {
                int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                if (confirmation == JOptionPane.YES_OPTION) {
                    // Remove from JTable
                    for (int i = 0; i < model.getRowCount(); i++) {
                        if (Integer.parseInt(model.getValueAt(i, 0).toString()) == customerId) {
                            model.removeRow(i);
                            break;
                        }
                    }

                    // Remove from TreeSet 
                    Customer customerToRemove = null;
                    for (Customer c : recordC) {
                        if (c.getCid() == customerId) {
                            customerToRemove = c;
                            break;
                        }
                    }
                    if (customerToRemove != null) {
                        recordC.remove(customerToRemove);
                    }

                    // Database operations to delete the record
                    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03")) {
                        String sqlDelete = "DELETE FROM customerinfo WHERE custID = ?";
                        try (PreparedStatement pstmt = conn.prepareStatement(sqlDelete)) {
                            pstmt.setInt(1, customerId);
                            pstmt.executeUpdate();
                        }
                    }

                    // Notify the user
                    JOptionPane.showMessageDialog(this, "Record deleted successfully!");
                   
                }
            } else {
                JOptionPane.showMessageDialog(this, "Customer ID " + customerId + " does not exist in the table.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid numeric Customer ID.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please enter a Customer ID to delete.");
    }

    }//GEN-LAST:event_deleteActionPerformed

    private void tb1CustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb1CustomerMouseClicked
        // TODO add your handling code here   
    }//GEN-LAST:event_tb1CustomerMouseClicked

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
          
     //get selected row                                
    int selectedRow = tb1Customer.getSelectedRow();

    // if user dont select row, display appropriate message
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(rootPane, "Please select a row to edit");
        
    } else {
        //get the customer details from selected row
        int customerId = Integer.parseInt(tb1Customer.getValueAt(selectedRow, 0).toString());
        String name = tb1Customer.getValueAt(selectedRow, 1).toString();
        String address = tb1Customer.getValueAt(selectedRow, 2).toString();
        String email = "";
        
        //get remaining details that dont display in jtable from collection, based on id
        for (Customer c : recordC) {
            if (c.getCid() == customerId) {
                email = c.getCemail();
                break;
            }
        }
        
        //display Edit Interface that allow user to edit the details
        EditCustomer editC = new EditCustomer(customerId, name, address, email);
        editC.setVisible(true);

        editC.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                try {
                    // get latest text field
                    int CustomerId = Integer.parseInt(editC.txtid.getText());
                    String updatedName = editC.txtname.getText();
                    String updatedAddress = editC.txtaddress.getText();
                    String updatedEmail = editC.txtEmail.getText();
                    
                    
                    // Update the JTable
                    DefaultTableModel model = (DefaultTableModel) tb1Customer.getModel();          
                    model.setValueAt(updatedName, selectedRow, 1);
                    model.setValueAt(updatedAddress, selectedRow, 2);

                    // Update the TreeSet
                    Customer customerToUpdate = null;
                    for (Customer c : recordC) {
                        if (c.getCid() == customerId) {
                            customerToUpdate = c;
                            break;
                        }
                    }
                    //set the new value into the restaurant collection using setter methods
                    if (customerToUpdate != null) {
               
                        customerToUpdate.setCname(updatedName);
                        customerToUpdate.setCaddress(updatedAddress);
                        customerToUpdate.setCemail(updatedEmail);
                    }

                    // Database operations to update the record
                    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03")) {
                        String sqlUpdate = "UPDATE customerinfo SET custName = ?, custAddress = ?, custEmail = ?  WHERE custID = ?";
                        try (PreparedStatement pstmt = conn.prepareStatement(sqlUpdate)) {
                            pstmt.setString(1, updatedName);
                            pstmt.setString(2, updatedAddress);
                             pstmt.setString(3, updatedEmail);
                            pstmt.setInt(4, CustomerId);
                           
                            int rowsAffected = pstmt.executeUpdate();

                            if (rowsAffected > 0) {
                                JOptionPane.showMessageDialog(rootPane, "Record updated successfully!");
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "No record was updated.");
                            }
                        } 
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(rootPane, "Error updating database: " + e.getMessage());
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(rootPane, "Invalid number format: " + e.getMessage());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "An error occurred: " + e.getMessage());
                }
            }
        });
    }
    }//GEN-LAST:event_editActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtID.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        txtName.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        txtAddress.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        txtEmail.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterCustomer.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterCustomer.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterCustomer.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterCustomer.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> sortC;
    private javax.swing.JTable tb1Customer;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
