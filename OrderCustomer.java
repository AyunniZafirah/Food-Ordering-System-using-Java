package adv_prog_ass2;

import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.function.Supplier;
import javax.swing.JOptionPane;

/**
 *
 * @author ayunn
 */
public final class OrderCustomer extends javax.swing.JFrame {

    private String customerId;
    private String orderID;
    private Set<Integer> generatedIDs = new HashSet<>();
    ArrayList<Order> recordO = new ArrayList<>();
//    private ArrayList<Order> recordO;

    /**
     * Creates new form OrderCustomer
     */
    public OrderCustomer() {
        this.customerId = customerId;
        initComponents();
        restaurantlist();
        setID();
        setCustomerId(this.customerId);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateOrder = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        cbRestaurant = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtMenu1 = new javax.swing.JTextField();
        txtMenu2 = new javax.swing.JTextField();
        txtMenu3 = new javax.swing.JTextField();
        txtprice1 = new javax.swing.JTextField();
        txtprice2 = new javax.swing.JTextField();
        txtprice3 = new javax.swing.JTextField();
        spinnerq1 = new javax.swing.JSpinner();
        spinnerq2 = new javax.swing.JSpinner();
        spinnerq3 = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        txtpricetotal = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lblOrderID = new javax.swing.JLabel();
        lblcustid = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setText("Customer ID : ");

        jLabel3.setText("Date Ordered:");

        jLabel2.setText("Chose Restaurant :");

        cbRestaurant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        cbRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRestaurantActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(239, 197, 215));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("MENU");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("PRICE (RM)");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("QUANTITY");

        txtMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMenu2ActionPerformed(evt);
            }
        });

        spinnerq1.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerq2.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        spinnerq3.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel10.setText("TOTAL AMOUNT : RM ");

        txtpricetotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpricetotalActionPerformed(evt);
            }
        });

        btnCalculate.setText("CALCULATE");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMenu1)
                            .addComponent(txtMenu2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(txtMenu3))
                        .addGap(31, 31, 31)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(73, 73, 73)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtprice1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtprice2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtprice3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerq1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerq2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerq3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(24, 24, 24))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtpricetotal, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCalculate)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(txtMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(txtMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(txtMenu3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtpricetotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCalculate))
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(txtprice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(txtprice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(txtprice3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(spinnerq1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(spinnerq2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(spinnerq3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnConfirm.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnConfirm.setText("CONFIRM ORDER");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        jLabel7.setText("Order ID :");

        lblOrderID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblOrderID.setText("ID");

        lblcustid.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblcustid.setText("id");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2)))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblcustid, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(btnConfirm)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addContainerGap(545, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblcustid))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(dateOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConfirm)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void txtMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMenu2ActionPerformed
    public ArrayList<Order> getRecordO() {
        return recordO;
    }

    //Go back to Home page
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        // Get the single instance of Home
        Home h = Home.getInstance();
        h.setLocationRelativeTo(null); // Center the frame
        h.setVisible(true); // Show the frame
        this.setVisible(false); // Hide the current frame

    }//GEN-LAST:event_btnBackActionPerformed

// add all restaurant from database into jcombobox
    private void restaurantlist() {
        try {
            // Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish a connection to the database
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

            // Create a statement to execute SQL queries
            Statement statement = conn.createStatement();

            // get all restaurant names from database
            String query = "SELECT restaurantName FROM restaurantinfo";
            ResultSet resultSet = statement.executeQuery(query);

            // Loop through the result set and add each restaurant name to the JComboBox
            while (resultSet.next()) {
                String restaurantName = resultSet.getString("restaurantName");
                cbRestaurant.addItem(restaurantName);
            }

            conn.close();
            statement.close();
            resultSet.close();
        } catch (SQLException e) {
            System.out.print("SQL error occured");
        } catch (ClassNotFoundException e) {
            System.out.print("Class not found");

        }
    }

private void setID() {
    // Supplier to generate the random number
    Supplier<Integer> randomNumberSupplier = () -> 400000 + new Random().nextInt(100000);
    int randomNumber;

    // Generate a unique random number
    do {
        randomNumber = randomNumberSupplier.get();
    } while (generatedIDs.contains(randomNumber) || isOrderIDInDatabase(randomNumber));

    // At this point, randomNumber is guaranteed to be unique because the loop exits 
    // only if the generated number is not in the generatedIDs set and not in the database

    // Add the unique random number to the set
    generatedIDs.add(randomNumber);

    // Convert orderID from int to a String
    orderID = String.valueOf(randomNumber);

    // Set the label text
    lblOrderID.setText(orderID);
}
private boolean isOrderIDInDatabase(int orderID) {
    boolean exists = false;
    try {
        // Load MySQL JDBC Driver
        Class.forName("com.mysql.cj.jdbc.Driver");

        // Establish database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

        // Prepare SQL query to check for orderID existence
        String checkOrderID = "SELECT COUNT(*) FROM orderinfo WHERE OrderID = ?";
        PreparedStatement checkStmt = conn.prepareStatement(checkOrderID);
        checkStmt.setInt(1, orderID);
        ResultSet rs = checkStmt.executeQuery();
        rs.next();
        int count = rs.getInt(1);

        if (count > 0) {
            exists = true;
        }

        // Close connection
        rs.close();
        checkStmt.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        // Handle exceptions (e.g., show error message)
    }
    return exists;
}


    // method to get back customerID value from input user (before they proceed to order)
    public void setCustomerId(String customerId) {
        this.customerId = customerId;
        lblcustid.setText(String.valueOf(customerId));
    }

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:
        // Validate input fields and save data
        try {
            // Check if date is selected
            if (dateOrder.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Please select a date.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check if restaurant is selected
            if (cbRestaurant.getSelectedItem() == null || cbRestaurant.getSelectedItem().equals("-")) {
                JOptionPane.showMessageDialog(null, "Please select a Restaurant.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check if total price is calculated
            if (txtpricetotal.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please calculate the total price first.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Collect data
            String orderID = lblOrderID.getText();
            int orderid = Integer.parseInt(orderID); // Convert orderID to int

            String custIDStr = lblcustid.getText();
            int custID = Integer.parseInt(custIDStr); // Convert custID to int

            // Format date into String
            Date selectedDate = dateOrder.getDate();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            String date = dateFormat.format(selectedDate);

            // Collect the order details
            String restName = (String) cbRestaurant.getSelectedItem();
            String menu1 = txtMenu1.getText();
            String menu2 = txtMenu2.getText();
            String menu3 = txtMenu3.getText();

            double price1 = Double.parseDouble(txtprice1.getText());
            double price2 = Double.parseDouble(txtprice2.getText());
            double price3 = Double.parseDouble(txtprice3.getText());

            int q1 = (int) spinnerq1.getValue();
            int q2 = (int) spinnerq2.getValue();
            int q3 = (int) spinnerq3.getValue();

            // Create new Order object
            Order order = new Order(orderid, custID, date, restName, menu1, menu2, menu3, price1, q1, price2, q2, price3, q3, calcPrice());

            // Add order to collection (ArrayList)
            recordO.add(order);
//            System.out.println("Order added: " + order);

            // Store data into the database
            try {
                // Load MySQL JDBC Driver
                Class.forName("com.mysql.cj.jdbc.Driver");

                // Establish database connection
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

                // Prepare SQL query to insert order details based on collection
                String sqlorderinfo = "INSERT INTO orderinfo (OrderID, custID, date_order, restaurantName, foodName1, foodName2, foodName3, price1, price2, price3, totalamount) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement pstmtO = conn.prepareStatement(sqlorderinfo);

                // insert order details into database
                pstmtO.setInt(1, order.getOrderID());
                pstmtO.setInt(2, order.getCustomerId());
                pstmtO.setString(3, order.getOrderDate());
                pstmtO.setString(4, order.getRestaurantName());
                pstmtO.setString(5, order.getMenu1());
                pstmtO.setString(6, order.getMenu2());
                pstmtO.setString(7, order.getMenu3());
                pstmtO.setDouble(8, order.getPrice1());
                pstmtO.setDouble(9, order.getPrice2());
                pstmtO.setDouble(10, order.getPrice3());
                pstmtO.setDouble(11, order.getTotalprice());
                // Execute update
                pstmtO.executeUpdate();

                // Close connection
                conn.close();

                // Show success message
                JOptionPane.showMessageDialog(null, "Order Info Added Successfully");
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "MySQL Driver not found.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid numbers for price fields.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnConfirmActionPerformed

//display menu items and price based on selected restaurant from jcombo box only
    private void cbRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRestaurantActionPerformed

        // Clear the text fields
        try {
            // Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish a connection to the database
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

            // Get the selected restaurant name from jComboBox2
            String selectedRestaurant = (String) cbRestaurant.getSelectedItem();

            if (selectedRestaurant.equals("-")) {
                // Clear the text fields
                txtMenu1.setText("");
                txtprice1.setText("");
                txtMenu2.setText("");
                txtprice2.setText("");
                txtMenu3.setText("");
                txtprice3.setText("");

            }

            // Query to fetch menu food and price based on selected restaurant
            String query = "SELECT foodName1, foodName2,foodName3, price1, price2, price3 "
                    + "FROM restaurantinfo "
                    + "WHERE restaurantName = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(query);
            preparedStatement.setString(1, selectedRestaurant);
            ResultSet rs = preparedStatement.executeQuery();

            // Display the retrieved data in text fields
            if (rs.next()) {
                // Assuming you have three sets of menu and price text fields
                String menuFood1 = rs.getString("foodName1");
                String menuFood2 = rs.getString("foodName2");
                String menuFood3 = rs.getString("foodName3");
                double price1 = rs.getDouble("price1");
                double price2 = rs.getDouble("price2");
                double price3 = rs.getDouble("price3");
                txtMenu1.setText(menuFood1);
                txtMenu2.setText(menuFood2);
                txtMenu3.setText(menuFood3);
                txtprice1.setText(String.valueOf(price1));
                txtprice2.setText(String.valueOf(price2));
                txtprice3.setText(String.valueOf(price3));

            } else {
                //dont do anyting
            }

            // Close JDBC objects
            rs.close();
            preparedStatement.close();
            conn.close();

        } catch (SQLException ex) {
            ex.printStackTrace(); // Print the stack trace for debugging
            System.out.println("SQL error occurred: " + ex.getMessage());
            // Handle SQL exceptions appropriately, e.g., show error message to user
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace(); // Print the stack trace for debugging
            System.out.println("Class not found: " + ex.getMessage());
            // Handle class not found exception

        }

    }//GEN-LAST:event_cbRestaurantActionPerformed

    // method to calculate TotalPrice
    private double calcPrice() {
        String Price1 = txtprice1.getText();
        double price1 = Double.parseDouble(Price1);
        String Price2 = txtprice2.getText();
        double price2 = Double.parseDouble(Price2);
        String Price3 = txtprice3.getText();
        double price3 = Double.parseDouble(Price3);

        int value1 = (int) spinnerq1.getValue();
        int value2 = (int) spinnerq2.getValue();
        int value3 = (int) spinnerq3.getValue();

        return (price1 * value1) + (price2 * value2) + (price3 * value3);

    }
//set the total price in 2 decimal points only
    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        // TODO add your handling code here:
        double totalPrice = calcPrice();
        String formattedPrice = String.format("%.2f", totalPrice);
        txtpricetotal.setText(formattedPrice);
        txtpricetotal.setText(String.valueOf(calcPrice()));

    }//GEN-LAST:event_btnCalculateActionPerformed

    private void txtpricetotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpricetotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpricetotalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnConfirm;
    public javax.swing.JComboBox<String> cbRestaurant;
    public com.toedter.calendar.JDateChooser dateOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSpinner jSpinner1;
    public javax.swing.JLabel lblOrderID;
    public javax.swing.JLabel lblcustid;
    public javax.swing.JSpinner spinnerq1;
    public javax.swing.JSpinner spinnerq2;
    public javax.swing.JSpinner spinnerq3;
    public javax.swing.JTextField txtMenu1;
    public javax.swing.JTextField txtMenu2;
    public javax.swing.JTextField txtMenu3;
    public javax.swing.JTextField txtprice1;
    public javax.swing.JTextField txtprice2;
    public javax.swing.JTextField txtprice3;
    public javax.swing.JTextField txtpricetotal;
    // End of variables declaration//GEN-END:variables
}
