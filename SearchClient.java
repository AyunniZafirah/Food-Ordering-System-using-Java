/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package adv_prog_ass2;

import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class SearchClient extends javax.swing.JFrame {

    private Client cl;

    public SearchClient(RegisterCustomer rc, RegisterRestaurant rr, OrderCustomer oc) {

        this.cl = new Client(rc.getRecordC(), rr.getRecordR(), oc.getRecordO());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dbClientType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtorders = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        bthClear = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        dbClientType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Customer", "Restaurant", " " }));
        dbClientType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbClientTypeActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtorders.setColumns(20);
        txtorders.setRows(5);
        jScrollPane1.setViewportView(txtorders);

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel3.setText("SEARCH CLIENT");

        bthClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bthClear.setText("CLEAR");
        bthClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bthClearActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Client Type :");

        jLabel2.setText("Enter ID :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(19, 19, 19)
                                            .addComponent(jLabel2)))
                                    .addGap(12, 12, 12)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtid)
                                        .addComponent(dbClientType, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(107, 107, 107)
                                    .addComponent(jLabel3)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1)
                                .addComponent(btnSearch))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(bthClear)))
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dbClientType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnSearch))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(bthClear)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Search clients based on their ID
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        txtorders.setText("");
        txtorders.setEditable(false);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/clientinfo", "root", "AYUNNI03");

            String clientIdStr = txtid.getText().trim();
            int clientId = Integer.parseInt(clientIdStr);

            // display appropriate message is user did not select restaurant
            if (dbClientType.getSelectedItem().equals("-")) {
                JOptionPane.showMessageDialog(this, "Please select client type");
            } //condition if Customer is selected
            else if (dbClientType.getSelectedItem().equals("Customer")) {
                if (cl.isCustomerRegistered(clientId)) {

                    //get id of that customer
                    Customer customer = cl.getCustomerById(clientId);
                    if (customer != null) {
                        StringBuilder result = new StringBuilder();

                        //display customer details based on their id
                        result.append("Customer ID: ").append(customer.getCid()).append("\n");
                        result.append("Name: ").append(customer.getCname()).append("\n");
                        result.append("Email: ").append(customer.getCemail()).append("\n");
                        result.append("Address: ").append(customer.getCaddress()).append("\n");
                        result.append("Past Orders: \n");

                        // display order details from database based on their id
                        String checkSQL = "SELECT restaurantName, date_order, foodName1, foodName2, foodName3, price1, price2, price3, totalamount FROM orderinfo WHERE custID = ?";
                        PreparedStatement checkStmt = conn.prepareStatement(checkSQL);
                        checkStmt.setInt(1, clientId);
                        ResultSet rs = checkStmt.executeQuery();

                        double totalAmountPaid = 0.0;

                        while (rs.next()) {

                            //assign each column in orderinfo table to a variable
                            String restaurantName = rs.getString("restaurantName");
                            String orderDate = rs.getString("date_order");
                            String foodName1 = rs.getString("foodName1");
                            String foodName2 = rs.getString("foodName2");
                            String foodName3 = rs.getString("foodName3");
                            double price1 = rs.getDouble("price1");
                            double price2 = rs.getDouble("price2");
                            double price3 = rs.getDouble("price3");
                            double totalAmount = rs.getDouble("totalamount");

                            //display the order details
                            result.append("Order Date: ").append(orderDate).append("\n");
                            result.append("Restaurant Name: ").append(restaurantName).append("\n");
                            result.append("Food Name 1: ").append(foodName1).append("\n");
                            result.append("Food Name 2: ").append(foodName2).append("\n");
                            result.append("Food Name 3: ").append(foodName3).append("\n");
                            result.append("Price 1: RM ").append(price1).append("\n");
                            result.append("Price 2: RM ").append(price2).append("\n");
                            result.append("Price 3: RM ").append(price3).append("\n");
                            result.append("Total : RM ").append(totalAmount).append("\n");
                            result.append("------------------------------\n");

                            totalAmountPaid += totalAmount;
                        }
                        // Append the total amount paid by the customer
                        result.append("Total Amount Paid: RM ").append(String.format("%.2f", totalAmountPaid)).append("\n");

                        txtorders.setText(result.toString());

//                        double totalAmount = 0.0;
//                        List<Order> customerOrders = cl.getOrdersByCustomerId(clientId);
//
//                        int i = 1;
//                        for (Order order : customerOrders) {
//                            result.append("Order ").append(i).append("\n");
//                            result.append("Restaurant Name: ").append(order.getRestaurantName()).append("\n");
//                            result.append("Date Ordered: ").append(order.getDateOrdered()).append("\n");
//                            result.append("Foods Ordered: \n");
//
//                            double orderTotal = 0.0;
//                            for (OrderItem item : order.getOrderItems()) {
//                                result.append(" - ").append(item.getFoodName()).append(" x").append(item.getQuantity()).append("\n");
//                                double itemTotal = item.getPrice() * item.getQuantity();
//                                result.append("   Price: RM ").append(String.format("%.2f", itemTotal)).append("\n");
//                                orderTotal += itemTotal;
//                            }
//
//                            result.append("Order Amount: RM ").append(String.format("%.2f", orderTotal)).append("\n");
//                            totalAmount += orderTotal;
//                            result.append("\n");
//                            i++;
//                        }
//                        result.append("Total Amount Paid: RM ").append(String.format("%.2f", totalAmount)).append("\n");
                        txtorders.setText(result.toString());

                    } else {
                        txtorders.setText("Customer not found.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Customer with ID " + clientId + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } //condition if Restaurant get selected
            else if (dbClientType.getSelectedItem().equals("Restaurant")) {
                if (cl.isRestaurantRegistered(clientId)) {

                    //get id of that customer
                    Restaurant restaurant = cl.getRestaurantById(clientId);
                    if (restaurant != null) {
                        StringBuilder result = new StringBuilder();

                        //display restaurant details
                        result.append("Name: ").append(restaurant.getRname()).append("\n");
                        result.append("Email: ").append(restaurant.getRemail()).append("\n");
                        result.append("Foods Sold:\n");

                        //display menu item, price sold by this restaurant
                        if (restaurant.getRfood1() != null && !restaurant.getRfood1().isEmpty()) {
                            result.append(" - ").append(restaurant.getRfood1())
                                    .append(": RM ").append(String.format("%.2f", restaurant.getRfoodprice1())).append("\n");
                        }
                        if (restaurant.getRfood2() != null && !restaurant.getRfood2().isEmpty()) {
                            result.append(" - ").append(restaurant.getRfood2())
                                    .append(": RM ").append(String.format("%.2f", restaurant.getRfoodprice2())).append("\n");
                        }
                        if (restaurant.getRfood3() != null && !restaurant.getRfood3().isEmpty()) {
                            result.append(" - ").append(restaurant.getRfood3())
                                    .append(": RM ").append(String.format("%.2f", restaurant.getRfoodprice3())).append("\n");
                        }

                        txtorders.setText(result.toString());
                    } else {
                        txtorders.setText("Restaurant not found.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Restaurant with ID " + clientId + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid ID.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database connection error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed


    private void dbClientTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbClientTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbClientTypeActionPerformed

    private void bthClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bthClearActionPerformed
        // TODO add your handling code here:
        dbClientType.setSelectedItem("-");
        txtid.setText("");
        txtorders.setText("");
    }//GEN-LAST:event_bthClearActionPerformed

    //go back to home page
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            // Get the single instance of Home
    Home h = Home.getInstance();
    h.setLocationRelativeTo(null); // Center the frame
    h.setVisible(true); // Show the frame
    this.setVisible(false); // Hide the current frame

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RegisterCustomer rc = new RegisterCustomer();
                RegisterRestaurant rr = new RegisterRestaurant();
                OrderCustomer oc = new OrderCustomer();
                SearchClient sc = new SearchClient(rc, rr, oc);
                rc.setVisible(true);
                sc.setVisible(true);
                oc.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bthClear;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> dbClientType;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextArea txtorders;
    // End of variables declaration//GEN-END:variables
}
